// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts            Account[]
  sessions            Session[]
  companyId           String?
  company             Company? @relation(fields: [companyId], references: [id])
  assignedProjects    ProjectUser[]
  assignedTasks       TaskAssignment[]
  createdProjects     Project[] @relation("ProjectCreator")
  createdTasks        Task[] @relation("TaskCreator")
  createdDocuments    Document[] @relation("DocumentCreator")
  createdApprovals    Approval[] @relation("ApprovalCreator")
  approvalAssignments ApprovalAssignment[]
  chatMessages        ChatMessage[]
  timesheets          Timesheet[]
  notifications       Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  website     String?
  phone       String?
  address     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users      User[]
  projects   Project[]
  templates  DocumentTemplate[]
  numberingRules NumberingRule[]
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  priority   ProjectPriority @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  budget      Decimal?      @db.Decimal(15, 2)
  actualCost  Decimal?      @db.Decimal(15, 2)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  companyId   String
  company     Company @relation(fields: [companyId], references: [id])
  creatorId   String
  creator     User @relation("ProjectCreator", fields: [creatorId], references: [id])
  users       ProjectUser[]
  tasks       Task[]
  documents   Document[]
  approvals   Approval[]
  chatMessages ChatMessage[]
  finances    Finance[]
  objects     ProjectObject[]
}

model ProjectObject {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String?
  coordinates String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}

model ProjectUser {
  id        String   @id @default(cuid())
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  userId    String
  user      User @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority   TaskPriority @default(MEDIUM)
  startDate   DateTime?
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  creatorId String
  creator   User @relation("TaskCreator", fields: [creatorId], references: [id])
  assignments TaskAssignment[]
  dependencies TaskDependency[] @relation("TaskDependency")
  dependsOn    TaskDependency[] @relation("DependsOnTask")
}

model TaskAssignment {
  id        String   @id @default(cuid())
  assignedAt DateTime @default(now())

  taskId String
  task   Task @relation(fields: [taskId], references: [id])
  userId String
  user   User @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
}

model TaskDependency {
  id        String @id @default(cuid())
  type      DependencyType @default(FINISH_TO_START)

  taskId String
  task   Task @relation("TaskDependency", fields: [taskId], references: [id])
  dependsOnId String
  dependsOn   Task @relation("DependsOnTask", fields: [dependsOnId], references: [id])

  @@unique([taskId, dependsOnId])
}

model Document {
  id          String         @id @default(cuid())
  title       String
  description String?
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  version     Int            @default(1)
  isLatest    Boolean        @default(true)
  documentNumber String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  creatorId String
  creator   User @relation("DocumentCreator", fields: [creatorId], references: [id])
  templateId String?
  template   DocumentTemplate? @relation(fields: [templateId], references: [id])
  versions   DocumentVersion[]
  approvals  Approval[]
}

model DocumentVersion {
  id          String   @id @default(cuid())
  version     Int
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  createdAt   DateTime @default(now())

  documentId String
  document   Document @relation(fields: [documentId], references: [id])
}

model DocumentTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String   @db.Text
  variables   Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id])
  documents Document[]
}

model Approval {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      ApprovalStatus @default(PENDING)
  type        ApprovalType
  data        Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  documentId String?
  document  Document? @relation(fields: [documentId], references: [id])
  creatorId String
  creator   User @relation("ApprovalCreator", fields: [creatorId], references: [id])
  assignments ApprovalAssignment[]
}

model ApprovalAssignment {
  id        String   @id @default(cuid())
  status    ApprovalStatus @default(PENDING)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  approvalId String
  approval   Approval @relation(fields: [approvalId], references: [id])
  userId     String
  user       User @relation(fields: [userId], references: [id])

  @@unique([approvalId, userId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  userId    String
  user      User @relation(fields: [userId], references: [id])
}

model Finance {
  id          String      @id @default(cuid())
  type        FinanceType
  category    String
  description String?
  amount      Decimal     @db.Decimal(15, 2)
  date        DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}

model Timesheet {
  id          String   @id @default(cuid())
  date        DateTime
  hours       Decimal  @db.Decimal(5, 2)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  userId    String
  user      User @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  userId String
  user   User @relation(fields: [userId], references: [id])
}

model NumberingRule {
  id          String   @id @default(cuid())
  name        String
  pattern     String
  counter     Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id])
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectRole {
  OWNER
  MANAGER
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ApprovalType {
  DOCUMENT
  BUDGET
  TIMELINE
  RESOURCE
  GENERAL
}

enum FinanceType {
  INCOME
  EXPENSE
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}
