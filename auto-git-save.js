#!/usr/bin/env node

const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

class AutoGitSaver {
  constructor() {
    this.interval = 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç
    this.workingDir = process.cwd()
    this.branch = 'main'
    this.intervalId = null
    this.isRunning = false
  }

  start() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ')
      return
    }

    console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Git –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç')
    console.log(`üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${this.workingDir}`)
    
    this.isRunning = true
    this.intervalId = setInterval(() => {
      this.performAutoSave()
    }, this.interval)

    // –ü–µ—Ä–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
    setTimeout(() => {
      console.log('üîÑ –ü–µ—Ä–≤–æ–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã...')
      this.performAutoSave()
    }, 120000)

    console.log('‚úÖ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ')
  }

  stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId)
      this.intervalId = null
      this.isRunning = false
      console.log('‚èπÔ∏è –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    }
  }

  async performAutoSave() {
    try {
      console.log(`\nüîÑ [${new Date().toLocaleString('ru-RU')}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Git
      const status = this.getGitStatus()
      
      if (status.hasChanges) {
        console.log(`üìù –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${status.files.length} —Ñ–∞–π–ª–æ–≤`)
        console.log(`üìã –§–∞–π–ª—ã: ${status.files.join(', ')}`)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        this.gitAddAll()
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
        const commitHash = this.gitCommit()
        
        // –ü—É—à–∏–º –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        this.gitPush()
        
        console.log(`‚úÖ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${commitHash}`)
      } else {
        console.log('üìù –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ')
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error.message)
    }
  }

  getGitStatus() {
    try {
      const statusOutput = execSync('git status --porcelain', { 
        cwd: this.workingDir,
        encoding: 'utf8'
      })
      
      const files = statusOutput.trim().split('\n').filter(line => line.trim())
      
      return {
        hasChanges: files.length > 0,
        files: files
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Git:', error.message)
      return { hasChanges: false, files: [] }
    }
  }

  gitAddAll() {
    try {
      execSync('git add .', { 
        cwd: this.workingDir,
        stdio: 'pipe'
      })
      console.log('üìÅ –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–Ω–¥–µ–∫—Å')
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: ${error.message}`)
    }
  }

  gitCommit() {
    try {
      const timestamp = new Date().toLocaleString('ru-RU')
      const message = `Auto-save: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (${timestamp})`
      
      execSync(`git commit -m "${message}"`, { 
        cwd: this.workingDir,
        encoding: 'utf8'
      })
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à –∫–æ–º–º–∏—Ç–∞
      const commitHash = execSync('git rev-parse HEAD', { 
        cwd: this.workingDir,
        encoding: 'utf8'
      }).trim()
      
      console.log(`üíæ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: ${commitHash.substring(0, 7)}`)
      return commitHash.substring(0, 7)
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: ${error.message}`)
    }
  }

  gitPush() {
    try {
      execSync(`git push origin ${this.branch}`, { 
        cwd: this.workingDir,
        stdio: 'pipe'
      })
      console.log(`üöÄ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ ${this.branch}`)
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${error.message}`)
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é
    }
  }

  // –†—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  async manualSave() {
    console.log('üîÑ –†—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...')
    await this.performAutoSave()
  }

  status() {
    console.log(`üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${this.isRunning ? 'üü¢ –í–∫–ª—é—á–µ–Ω–æ' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ'}`)
    if (this.isRunning) {
      console.log(`‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${this.interval / 60000} –º–∏–Ω—É—Ç`)
      console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${this.workingDir}`)
      console.log(`üåø –í–µ—Ç–∫–∞: ${this.branch}`)
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
  const args = process.argv.slice(2)
  const command = args[0]

  const saver = new AutoGitSaver()

  switch (command) {
    case 'start':
      saver.start()
      break
    case 'stop':
      saver.stop()
      break
    case 'save':
      saver.manualSave()
      break
    case 'status':
      saver.status()
      break
    default:
      console.log(`
üîÑ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Git –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node auto-git-save.js start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  node auto-git-save.js stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ  
  node auto-git-save.js save     - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–π—á–∞—Å
  node auto-git-save.js status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å

–ü—Ä–∏–º–µ—Ä:
  node auto-git-save.js start
      `)
  }
}

module.exports = AutoGitSaver
