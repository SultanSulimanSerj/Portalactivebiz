import { Server as HTTPServer } from 'http'
import { Server as SocketIOServer } from 'socket.io'
import { NextApiResponse } from 'next'

export type NextApiResponseWithSocket = NextApiResponse & {
  socket: {
    server: HTTPServer & {
      io?: SocketIOServer
    }
  }
}

export const config = {
  api: {
    bodyParser: false,
  },
}

let io: SocketIOServer | undefined

export function initSocket(server: HTTPServer): SocketIOServer {
  if (!io) {
    console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å–µ—Ä–≤–µ—Ä–∞...')
    
    io = new SocketIOServer(server, {
      path: '/api/socket',
      addTrailingSlash: false,
      cors: {
        origin: process.env.NEXTAUTH_URL || 'http://localhost:3000',
        methods: ['GET', 'POST'],
        credentials: true
      }
    })

    io.on('connection', (socket) => {
      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω:', socket.id)

      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞
      socket.on('join-project', (projectId: string) => {
        socket.join(`project:${projectId}`)
        console.log(`üìÅ –ö–ª–∏–µ–Ω—Ç ${socket.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É ${projectId}`)
      })

      // –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
      socket.on('leave-project', (projectId: string) => {
        socket.leave(`project:${projectId}`)
        console.log(`üìÅ –ö–ª–∏–µ–Ω—Ç ${socket.id} –ø–æ–∫–∏–Ω—É–ª –ø—Ä–æ–µ–∫—Ç ${projectId}`)
      })

      // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
      socket.on('typing', (data: { projectId: string; userName: string; isTyping: boolean }) => {
        socket.to(`project:${data.projectId}`).emit('user-typing', {
          userName: data.userName,
          isTyping: data.isTyping
        })
      })

      socket.on('disconnect', () => {
        console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω:', socket.id)
      })
    })

    console.log('‚úÖ Socket.IO —Å–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
  }

  return io
}

export function getIO(): SocketIOServer | undefined {
  return io
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞
export function emitNewMessage(projectId: string, message: any) {
  if (io) {
    io.to(`project:${projectId}`).emit('new-message', message)
    console.log(`üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç ${projectId}`)
  }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
export function emitProjectUpdate(projectId: string, data: any) {
  if (io) {
    io.to(`project:${projectId}`).emit('project-updated', data)
    console.log(`üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`)
  }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export function emitNotification(userId: string, notification: any) {
  if (io) {
    io.to(`user:${userId}`).emit('notification', notification)
    console.log(`üîî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`)
  }
}

