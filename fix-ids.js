#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const filesToFix = [
  'src/app/api/approvals/[id]/comments/route.ts',
  'src/app/api/approvals/[id]/attachments/route.ts',
  'src/app/api/approvals/[id]/attachments/[attachmentId]/route.ts',
  'src/app/api/auth/register/route.ts',
  'src/app/api/tasks/[id]/route.ts',
  'src/app/api/tasks/[id]/comments/route.ts',
  'src/app/api/projects/route.ts',
  'src/app/api/projects/[id]/route.ts',
  'src/app/api/projects/[id]/messages/route.ts',
  'src/app/api/projects/[id]/members/route.ts',
  'src/app/api/finance/route.ts',
  'src/app/api/chat/route.ts',
  'src/app/api/auth/invite/route.ts',
  'src/app/api/approvals/route.ts',
  'src/app/api/approvals/[id]/respond/route.ts'
];

function fixFile(filePath) {
  try {
    const fullPath = path.join(__dirname, filePath);
    
    if (!fs.existsSync(fullPath)) {
      console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return false;
    }

    let content = fs.readFileSync(fullPath, 'utf8');
    let modified = false;

    // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç randomUUID –Ω–∞ generateId
    if (content.includes("import { randomUUID } from 'crypto'")) {
      content = content.replace(
        "import { randomUUID } from 'crypto'",
        "import { generateId } from '@/lib/id-generator'"
      );
      modified = true;
    }

    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è randomUUID() –Ω–∞ generateId()
    if (content.includes('randomUUID()')) {
      content = content.replace(/randomUUID\(\)/g, 'generateId()');
      modified = true;
    }

    if (modified) {
      fs.writeFileSync(fullPath, content, 'utf8');
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
      return true;
    } else {
      console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π): ${filePath}`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
    return false;
  }
}

console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ID –≤ –ø—Ä–æ–µ–∫—Ç–µ...\n');

let fixedCount = 0;
let totalCount = filesToFix.length;

filesToFix.forEach(filePath => {
  if (fixFile(filePath)) {
    fixedCount++;
  }
});

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}`);
console.log(`üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalCount}`);
console.log(`üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((fixedCount / totalCount) * 100)}%`);

if (fixedCount === totalCount) {
  console.log('\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
} else {
  console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.');
}
